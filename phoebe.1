.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PHOEBE 1"
.TH PHOEBE 1 "2020-08-24" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Phoebe"
.IX Header "Phoebe"
This server serves a wiki as a Gemini site.
.PP
It does two and a half things:
.IP "It's a program that you run on a computer and other people connect to it using their Gemini client <https://gemini.circumlunar.space/clients.html> in order to read the pages on it." 4
.IX Item "It's a program that you run on a computer and other people connect to it using their Gemini client <https://gemini.circumlunar.space/clients.html> in order to read the pages on it."
.PD 0
.ie n .IP "It's a wiki, which means that people can edit the pages without needing an account. All they need is a client that speaks both Gemini <https://gemini.circumlunar.space/> and Titan <https://communitywiki.org/wiki/Titan>, and the password. The default password is ""hello"". X" 4
.el .IP "It's a wiki, which means that people can edit the pages without needing an account. All they need is a client that speaks both Gemini <https://gemini.circumlunar.space/> and Titan <https://communitywiki.org/wiki/Titan>, and the password. The default password is ``hello''. X" 4
.IX Item "It's a wiki, which means that people can edit the pages without needing an account. All they need is a client that speaks both Gemini <https://gemini.circumlunar.space/> and Titan <https://communitywiki.org/wiki/Titan>, and the password. The default password is hello. X"
.IP "People can also access it using a regular web browser. They'll get a very simple, read-only version of the site." 4
.IX Item "People can also access it using a regular web browser. They'll get a very simple, read-only version of the site."
.PD
To take a look for yourself, check out the test wiki via the
web <https://transjovian.org:1965/test> or via
Gemini <gemini://transjovian.org/test>.
.SS "What are pages written in?"
.IX Subsection "What are pages written in?"
Pages are written in gemtext, a lightweight hypertext format. You can use your
favourite text editor to write them.
.PP
A text line is a paragraph of text.
.PP
.Vb 2
\&    This is a paragraph.
\&    This is another paragraph.
.Ve
.PP
A link line starts with \*(L"=>\*(R", a space, a \s-1URL,\s0 optionally followed by whitespace
and some text; the \s-1URL\s0 can be absolute or relative.
.PP
.Vb 2
\&    => http://transjovian.org/ The Transjovian Council on the web
\&    => Welcome                 Welcome to The Transjovian Council
.Ve
.PP
A line starting with \*(L"```\*(R" toggles preformatting on and off.
.PP
.Vb 4
\&    Example:
\&    \`\`\`
\&    ./phoebe
\&    \`\`\`
.Ve
.PP
A line starting with \*(L"#\*(R", \*(L"##\*(R", or \*(L"###\*(R", followed by a space and some text is a
heading.
.PP
.Vb 2
\&    ## License
\&    The GNU Affero General Public License.
.Ve
.PP
A line starting with \*(L"*\*(R", followed by a space and some text is a list item.
.PP
.Vb 2
\&    * one item
\&    * another item
.Ve
.PP
A line starting with \*(L">\*(R", followed by a space and some text is a quote.
.PP
.Vb 2
\&    The monologue at the end is fantastic, with the city lights and the rain.
\&    > I\*(Aqve seen things you people wouldn\*(Aqt believe.
.Ve
.SS "How do you edit a Phoebe wiki?"
.IX Subsection "How do you edit a Phoebe wiki?"
You need to use a Titan-enabled client.
.PP
Known clients:
.IP "This repository comes with a Perl script called titan <https://alexschroeder.ch/cgit/phoebe/plain/titan> to upload files" 4
.IX Item "This repository comes with a Perl script called titan <https://alexschroeder.ch/cgit/phoebe/plain/titan> to upload files"
.PD 0
.IP "Gemini Write <https://alexschroeder.ch/cgit/gemini-write/> is an extension for the Emacs Gopher and Gemini client Elpher <https://thelambdalab.xyz/elpher/>" 4
.IX Item "Gemini Write <https://alexschroeder.ch/cgit/gemini-write/> is an extension for the Emacs Gopher and Gemini client Elpher <https://thelambdalab.xyz/elpher/>"
.IP "Gemini & Titan for Bash <https://alexschroeder.ch/cgit/gemini-titan/about/> are two shell functions that allow you to download and upload files" 4
.IX Item "Gemini & Titan for Bash <https://alexschroeder.ch/cgit/gemini-titan/about/> are two shell functions that allow you to download and upload files"
.PD
.SS "What is Titan?"
.IX Subsection "What is Titan?"
Titan is a companion protocol to Gemini: it allows clients to upload files to
Gemini sites, if servers allow this. On Phoebe, you can edit \*(L"raw\*(R"
pages. That is, at the bottom of a page you'll see a link to the \*(L"raw\*(R" page. If
you follow it, you'll see the page content as plain text. You can submit a
changed version of this text to the same \s-1URL\s0 using Titan. There is more
information for developers available
on Community Wiki <https://communitywiki.org/wiki/Titan>.
.SS "Dependencies"
.IX Subsection "Dependencies"
Perl libraries you need to install if you want to run Phoebe:
.IP "Algorithm::Diff" 4
.IX Item "Algorithm::Diff"
.PD 0
.IP "File::ReadBackwards" 4
.IX Item "File::ReadBackwards"
.IP "File::Slurper" 4
.IX Item "File::Slurper"
.IP "Modern::Perl" 4
.IX Item "Modern::Perl"
.IP "Net::Server" 4
.IX Item "Net::Server"
.IP "URI::Escape" 4
.IX Item "URI::Escape"
.PD
.PP
I'm going to be using \fIcurl\fR and \fIopenssl\fR in the \*(L"Quickstart\*(R" instructions,
so you'll need those tools as well. And finally, when people download their
data, the code calls \f(CW\*(C`tar\*(C'\fR.
.PP
On Debian:
.PP
.Vb 8
\&    sudo apt install \e
\&      libalgorithm\-diff\-xs\-perl \e
\&      libfile\-readbackwards\-perl \e
\&      libfile\-slurper\-perl \e
\&      libmodern\-perl\-perl \e
\&      libnet\-server\-perl \e
\&      liburi\-escape\-xs\-perl \e
\&      curl openssl tar
.Ve
.PP
The \fIupdate\-readme.pl\fR script I use to generate \fI\s-1README\s0.md\fR also requires
Pod::Markdown and Text::Slugify.
.SS "Quickstart"
.IX Subsection "Quickstart"
Right now there aren't any releases. You just get the latest version from the
repository and that's it. I'm going to assume that you're going to create a new
user just to be safe.
.PP
.Vb 3
\&    sudo adduser \-\-disabled\-login \-\-disabled\-password phoebe
\&    sudo su phoebe
\&    cd
.Ve
.PP
Now you're in your home directory, \fI/home/phoebe\fR. We're going to install
things right here. First, get the source code:
.PP
.Vb 2
\&    curl \-\-output phoebe \e
\&      https://alexschroeder.ch/cgit/phoebe/plain/phoebe?h=main
.Ve
.PP
Since Phoebe traffic is encrypted, we need to generate a certificate and a key.
These are both stored in \s-1PEM\s0 files. To create your own copies of these files
(and you should!), use \*(L"make cert\*(R" if you have a copy of the Makefile. If you
don't, use this:
.PP
.Vb 3
\&    openssl req \-new \-x509 \-newkey ec \e
\&    \-pkeyopt ec_paramgen_curve:prime256v1 \e
\&    \-days 1825 \-nodes \-out cert.pem \-keyout key.pem
.Ve
.PP
This creates a certificate and a private key, both of them unencrypted, using
eliptic curves of a particular kind, valid for five years.
.PP
You should have three files, now: \fIphoebe\fR, \fIcert.pem\fR, and
\&\fIkey.pem\fR. That's enough to get started! Start the server:
.PP
.Vb 1
\&    perl phoebe
.Ve
.PP
This starts the server in the foreground. Open a second terminal and test it:
.PP
.Vb 2
\&    echo gemini://localhost \e
\&      | openssl s_client \-\-quiet \-\-connect localhost:1965 2>/dev/null
.Ve
.PP
You should see a Gemini page starting with the following:
.PP
.Vb 2
\&    20 text/gemini; charset=UTF\-8
\&    Welcome to Phoebe!
.Ve
.PP
Success!! X \s-1XX\s0
.PP
Let's create a new page using the Titan protocol, from the command line:
.PP
.Vb 4
\&    echo "Welcome to the wiki!" > test.txt
\&    echo "Please be kind." >> test.txt
\&    echo "titan://localhost/raw/"\`date \-\-iso\-8601=date\`";mime=text/plain;size="\`wc \-\-bytes < test.txt\`";token=hello" \e
\&      | cat \- test.txt | openssl s_client \-\-quiet \-\-connect localhost:1965 2>/dev/null
.Ve
.PP
You should get a nice redirect message, with an appropriate date.
.PP
.Vb 1
\&    30 gemini://localhost:1965/page/2020\-06\-27
.Ve
.PP
You can check the page, now (replacing the appropriate date):
.PP
.Vb 2
\&    echo gemini://localhost:1965/page/2020\-06\-27 \e
\&      | openssl s_client \-\-quiet \-\-connect localhost:1965 2>/dev/null
.Ve
.PP
You should get back a page that starts as follows:
.PP
.Vb 3
\&    20 text/gemini; charset=UTF\-8
\&    Welcome to the wiki!
\&    Please be kind.
.Ve
.PP
Yay! \s-1XX XX\s0
.PP
Let me return to the topic of Titan-enabled clients for a moment. With those,
you can do simple things like this:
.PP
.Vb 1
\&    echo "Hello! This is a test!" | titan \-\-url=localhost/test \-\-token=hello
.Ve
.PP
Or this:
.PP
.Vb 1
\&    titan \-\-url=localhost/test \-\-token=hello test.txt
.Ve
.PP
That makes it a lot easier to upload new content! X
.PP
If you have a bunch of Gemtext files in a directory, you can upload them all in
one go:
.PP
.Vb 1
\&    titan \-\-url=titan://localhost/ \-\-token=hello *.gmi
.Ve
.SS "Wiki Directory"
.IX Subsection "Wiki Directory"
You home directory should now also contain a wiki directory called \fIwiki\fR. In
it, you'll find a few more files:
.ie n .IP "\fIpage\fR is the directory with all the page files in it; each file has the ""gmi"" extension and should be written in Gemtext format" 4
.el .IP "\fIpage\fR is the directory with all the page files in it; each file has the \f(CWgmi\fR extension and should be written in Gemtext format" 4
.IX Item "page is the directory with all the page files in it; each file has the gmi extension and should be written in Gemtext format"
.PD 0
.ie n .IP "\fIindex\fR is a file containing all the files in your \fIpage\fR directory for quick access; if you create new files in the \fIpage\fR directory, you should delete the \fIindex\fR file X it will get regenerated when needed; the format is one page name (without the "".gmi"" extension) per line, with lines separated from each other by a single ""\en""" 4
.el .IP "\fIindex\fR is a file containing all the files in your \fIpage\fR directory for quick access; if you create new files in the \fIpage\fR directory, you should delete the \fIindex\fR file X it will get regenerated when needed; the format is one page name (without the \f(CW.gmi\fR extension) per line, with lines separated from each other by a single \f(CW\en\fR" 4
.IX Item "index is a file containing all the files in your page directory for quick access; if you create new files in the page directory, you should delete the index file X it will get regenerated when needed; the format is one page name (without the .gmi extension) per line, with lines separated from each other by a single n"
.ie n .IP "\fIkeep\fR is the directory with all the old revisions of pages in it X if you've only made one change, then it won't exist, yet; and if you don't care about the older revisions, you can delete them; assuming you have a page called ""Welcome"" and edit it once, you have the current revision as \fIpage/Welcome.gmi\fR, and the old revision in \fIkeep/Welcome/1.gmi\fR (the page name turns into a subdirectory and each revision gets an apropriate number)" 4
.el .IP "\fIkeep\fR is the directory with all the old revisions of pages in it X if you've only made one change, then it won't exist, yet; and if you don't care about the older revisions, you can delete them; assuming you have a page called \f(CWWelcome\fR and edit it once, you have the current revision as \fIpage/Welcome.gmi\fR, and the old revision in \fIkeep/Welcome/1.gmi\fR (the page name turns into a subdirectory and each revision gets an apropriate number)" 4
.IX Item "keep is the directory with all the old revisions of pages in it X if you've only made one change, then it won't exist, yet; and if you don't care about the older revisions, you can delete them; assuming you have a page called Welcome and edit it once, you have the current revision as page/Welcome.gmi, and the old revision in keep/Welcome/1.gmi (the page name turns into a subdirectory and each revision gets an apropriate number)"
.ie n .IP "\fIfile\fR is the directory with all the uploaded files in it X if you haven't uploaded any files, then it won't exist, yet; you must explicitly allow \s-1MIME\s0 types for upload using the ""\-\-wiki_mime_type"" option (see \fIOptions\fR below)" 4
.el .IP "\fIfile\fR is the directory with all the uploaded files in it X if you haven't uploaded any files, then it won't exist, yet; you must explicitly allow \s-1MIME\s0 types for upload using the \f(CW\-\-wiki_mime_type\fR option (see \fIOptions\fR below)" 4
.IX Item "file is the directory with all the uploaded files in it X if you haven't uploaded any files, then it won't exist, yet; you must explicitly allow MIME types for upload using the --wiki_mime_type option (see Options below)"
.ie n .IP "\fImeta\fR is the directory with all the meta data for uploaded files in it X there should be a file here for every file in the \fIfile\fR directory; if you create new files in the \fIfile\fR directory, you should create a matching file here; if you have a file \fIfile/alex.jpg\fR you want to create a file \fImeta/alex.jpg\fR containing the line ""content\-type: image/jpeg""" 4
.el .IP "\fImeta\fR is the directory with all the meta data for uploaded files in it X there should be a file here for every file in the \fIfile\fR directory; if you create new files in the \fIfile\fR directory, you should create a matching file here; if you have a file \fIfile/alex.jpg\fR you want to create a file \fImeta/alex.jpg\fR containing the line \f(CWcontent\-type: image/jpeg\fR" 4
.IX Item "meta is the directory with all the meta data for uploaded files in it X there should be a file here for every file in the file directory; if you create new files in the file directory, you should create a matching file here; if you have a file file/alex.jpg you want to create a file meta/alex.jpg containing the line content-type: image/jpeg"
.ie n .IP "\fIchanges.log\fR is a file listing all the pages made to the wiki; if you make changes to the files in the \fIpage\fR or \fIfile\fR directory, they aren't going to be listed in this file and thus people will be confused by the changes you made X your call (but in all fairness, if you're collaborating with others you probably shouldn't do this); the format is one change per line, with lines separated from each other by a single ""\en"", and each line consisting of time stamp, pagename or filename, revision number if a page or 0 if a file, and the numeric code of the user making the edit (see ""Privacy"" below)" 4
.el .IP "\fIchanges.log\fR is a file listing all the pages made to the wiki; if you make changes to the files in the \fIpage\fR or \fIfile\fR directory, they aren't going to be listed in this file and thus people will be confused by the changes you made X your call (but in all fairness, if you're collaborating with others you probably shouldn't do this); the format is one change per line, with lines separated from each other by a single \f(CW\en\fR, and each line consisting of time stamp, pagename or filename, revision number if a page or 0 if a file, and the numeric code of the user making the edit (see ``Privacy'' below)" 4
.IX Item "changes.log is a file listing all the pages made to the wiki; if you make changes to the files in the page or file directory, they aren't going to be listed in this file and thus people will be confused by the changes you made X your call (but in all fairness, if you're collaborating with others you probably shouldn't do this); the format is one change per line, with lines separated from each other by a single n, and each line consisting of time stamp, pagename or filename, revision number if a page or 0 if a file, and the numeric code of the user making the edit (see Privacy below)"
.ie n .IP "\fIconfig\fR probably doesn't exist, yet; it is an optional file containing Perl code where you can mess with the code (see ""Configuration"" below)" 4
.el .IP "\fIconfig\fR probably doesn't exist, yet; it is an optional file containing Perl code where you can mess with the code (see ``Configuration'' below)" 4
.IX Item "config probably doesn't exist, yet; it is an optional file containing Perl code where you can mess with the code (see Configuration below)"
.PD
.SS "Options"
.IX Subsection "Options"
Phoebe has a bunch of options, and it uses Net::Server in the
background, which has even more options. Let's try to focus on the options you
might want to use right away.
.PP
Here's an example:
.PP
.Vb 5
\&    perl phoebe \e
\&      \-\-wiki_token=Elrond \e
\&      \-\-wiki_token=Thranduil \e
\&      \-\-wiki_page=Welcome \e
\&      \-\-wiki_page=About
.Ve
.PP
And here's some documentation:
.ie n .IP """\-\-wiki_token"" is for the token that users editing pages have to provide; the default is ""hello""; you can use this option multiple times and give different users different passwords, if you want" 4
.el .IP "\f(CW\-\-wiki_token\fR is for the token that users editing pages have to provide; the default is ``hello''; you can use this option multiple times and give different users different passwords, if you want" 4
.IX Item "--wiki_token is for the token that users editing pages have to provide; the default is hello; you can use this option multiple times and give different users different passwords, if you want"
.PD 0
.ie n .IP """\-\-wiki_page"" is an extra page to show in the main menu; you can use this option multiple times; this is ideal for general items like \fIAbout\fR or \fIContact\fR" 4
.el .IP "\f(CW\-\-wiki_page\fR is an extra page to show in the main menu; you can use this option multiple times; this is ideal for general items like \fIAbout\fR or \fIContact\fR" 4
.IX Item "--wiki_page is an extra page to show in the main menu; you can use this option multiple times; this is ideal for general items like About or Contact"
.ie n .IP """\-\-wiki_main_page"" is the page containing your header for the main page; that's were you would put your \s-1ASCII\s0 art header, your welcome message, and so on, see ""Main Page and Title"" below" 4
.el .IP "\f(CW\-\-wiki_main_page\fR is the page containing your header for the main page; that's were you would put your \s-1ASCII\s0 art header, your welcome message, and so on, see ``Main Page and Title'' below" 4
.IX Item "--wiki_main_page is the page containing your header for the main page; that's were you would put your ASCII art header, your welcome message, and so on, see Main Page and Title below"
.ie n .IP """\-\-wiki_mime_type"" is a \s-1MIME\s0 type to allow for uploads; text/plain is always allowed and doesn't need to be listed; you can also just list the type without a subtype, eg. ""image"" will allow all sorts of images (make sure random people can't use your server to exchange images X set a password using ""\-\-wiki_token"")" 4
.el .IP "\f(CW\-\-wiki_mime_type\fR is a \s-1MIME\s0 type to allow for uploads; text/plain is always allowed and doesn't need to be listed; you can also just list the type without a subtype, eg. \f(CWimage\fR will allow all sorts of images (make sure random people can't use your server to exchange images X set a password using \f(CW\-\-wiki_token\fR)" 4
.IX Item "--wiki_mime_type is a MIME type to allow for uploads; text/plain is always allowed and doesn't need to be listed; you can also just list the type without a subtype, eg. image will allow all sorts of images (make sure random people can't use your server to exchange images X set a password using --wiki_token)"
.ie n .IP """\-\-host"" is the hostname to serve; the default is ""localhost"" X you probably want to pick the name of your machine, if it is reachable from the Internet; if you use it multiple times, each host gets its own wiki space (see ""\-\-wiki_space"" below)" 4
.el .IP "\f(CW\-\-host\fR is the hostname to serve; the default is \f(CWlocalhost\fR X you probably want to pick the name of your machine, if it is reachable from the Internet; if you use it multiple times, each host gets its own wiki space (see \f(CW\-\-wiki_space\fR below)" 4
.IX Item "--host is the hostname to serve; the default is localhost X you probably want to pick the name of your machine, if it is reachable from the Internet; if you use it multiple times, each host gets its own wiki space (see --wiki_space below)"
.ie n .IP """\-\-port"" is the port to use; the default is 1965" 4
.el .IP "\f(CW\-\-port\fR is the port to use; the default is 1965" 4
.IX Item "--port is the port to use; the default is 1965"
.ie n .IP """\-\-wiki_dir"" is the wiki data directory to use; the default is either the value of the ""PHOEBE_DATA_DIR"" environment variable, or the ""./wiki"" subdirectory" 4
.el .IP "\f(CW\-\-wiki_dir\fR is the wiki data directory to use; the default is either the value of the \f(CWPHOEBE_DATA_DIR\fR environment variable, or the ``./wiki'' subdirectory" 4
.IX Item "--wiki_dir is the wiki data directory to use; the default is either the value of the PHOEBE_DATA_DIR environment variable, or the ./wiki subdirectory"
.ie n .IP """\-\-wiki_space"" adds an extra space that acts as its own wiki; a subdirectory with the same name gets created in your wiki data directory and thus you shouldn't name spaces like any of the files and directories already there (see ""Wiki Directory""); not that settings such as ""\-\-wiki_page"" and ""\-\-wiki_main_page"" apply to all spaces, but the page content will be different for every wiki space" 4
.el .IP "\f(CW\-\-wiki_space\fR adds an extra space that acts as its own wiki; a subdirectory with the same name gets created in your wiki data directory and thus you shouldn't name spaces like any of the files and directories already there (see ``Wiki Directory''); not that settings such as \f(CW\-\-wiki_page\fR and \f(CW\-\-wiki_main_page\fR apply to all spaces, but the page content will be different for every wiki space" 4
.IX Item "--wiki_space adds an extra space that acts as its own wiki; a subdirectory with the same name gets created in your wiki data directory and thus you shouldn't name spaces like any of the files and directories already there (see Wiki Directory); not that settings such as --wiki_page and --wiki_main_page apply to all spaces, but the page content will be different for every wiki space"
.ie n .IP """\-\-cert_file"" is the certificate \s-1PEM\s0 file to use; the default is \fIcert.pem\fR" 4
.el .IP "\f(CW\-\-cert_file\fR is the certificate \s-1PEM\s0 file to use; the default is \fIcert.pem\fR" 4
.IX Item "--cert_file is the certificate PEM file to use; the default is cert.pem"
.ie n .IP """\-\-key_file"" is the private key \s-1PEM\s0 file to use; the default is \fIkey.pem\fR" 4
.el .IP "\f(CW\-\-key_file\fR is the private key \s-1PEM\s0 file to use; the default is \fIkey.pem\fR" 4
.IX Item "--key_file is the private key PEM file to use; the default is key.pem"
.ie n .IP """\-\-log_level"" is the log level to use, 0 is quiet, 1 is errors, 2 is warnings, 3 is info, and 4 is debug; the default is 2" 4
.el .IP "\f(CW\-\-log_level\fR is the log level to use, 0 is quiet, 1 is errors, 2 is warnings, 3 is info, and 4 is debug; the default is 2" 4
.IX Item "--log_level is the log level to use, 0 is quiet, 1 is errors, 2 is warnings, 3 is info, and 4 is debug; the default is 2"
.PD
.SS "Running Phoebe as a Daemon"
.IX Subsection "Running Phoebe as a Daemon"
If you want to start Phoebe as a daemon, the following options come in
handy:
.ie n .IP """\-\-setsid"" makes sure Phoebe runs as a daemon in the background" 4
.el .IP "\f(CW\-\-setsid\fR makes sure Phoebe runs as a daemon in the background" 4
.IX Item "--setsid makes sure Phoebe runs as a daemon in the background"
.PD 0
.ie n .IP """\-\-pid_file"" is the file where the process id (pid) gets written once the server starts up; this is useful if you run the server in the background and you need to kill it" 4
.el .IP "\f(CW\-\-pid_file\fR is the file where the process id (pid) gets written once the server starts up; this is useful if you run the server in the background and you need to kill it" 4
.IX Item "--pid_file is the file where the process id (pid) gets written once the server starts up; this is useful if you run the server in the background and you need to kill it"
.ie n .IP """\-\-log_file"" is the file to write logs into; the default is to write log output to the standard error (stderr)" 4
.el .IP "\f(CW\-\-log_file\fR is the file to write logs into; the default is to write log output to the standard error (stderr)" 4
.IX Item "--log_file is the file to write logs into; the default is to write log output to the standard error (stderr)"
.ie n .IP """\-\-user"" and ""\-\-group"" might come in handy if you start Phoebe using a different user" 4
.el .IP "\f(CW\-\-user\fR and \f(CW\-\-group\fR might come in handy if you start Phoebe using a different user" 4
.IX Item "--user and --group might come in handy if you start Phoebe using a different user"
.PD
.SS "Using systemd"
.IX Subsection "Using systemd"
In this case, we don't want to daemonize the process. Systemd is going to handle
that for us. There's more documentation available
online <https://www.freedesktop.org/software/systemd/man/systemd.service.html>.
.PP
Basically, this is the template for our service:
.PP
.Vb 12
\&    [Unit]
\&    Description=Phoebe
\&    After=network.target
\&    [Service]
\&    Type=simple
\&    WorkingDirectory=/home/phoebe
\&    ExecStart=/home/phoebe/phoebe
\&    Restart=always
\&    User=phoebe
\&    Group=phoebe
\&    [Install]
\&    WantedBy=multi\-user.target
.Ve
.PP
Save this as \fIphoebe.service\fR, and then link it:
.PP
.Vb 1
\&    sudo ln \-s /home/phoebe/phoebe.service /etc/systemd/system/
.Ve
.PP
Start it:
.PP
.Vb 1
\&    sudo systemctl start phoebe
.Ve
.PP
Check the log output:
.PP
.Vb 1
\&    sudo journalctl \-\-unit phoebe
.Ve
.SS "Security"
.IX Subsection "Security"
The server uses \*(L"access tokens\*(R" to check whether people are allowed to edit
files. You could also call them \*(L"passwords\*(R", if you want. They aren't associated
with a username. You set them using the \f(CW\*(C`\-\-wiki_token\*(C'\fR option. By default, the
only password is \*(L"hello\*(R". That's why the Titan command above contained
\&\*(L"token=hello\*(R". X
.PP
If you're going to check up on your wiki often, looking at Changes on a daily
basis, you could just tell people about the token on a page of your wiki.
Spammers would at least have to read the instructions and in my experience the
hardly ever do.
.PP
You could also create a separate password for every contributor and when they
leave the project, you just remove the token from the options and restart
Phoebe. They will no longer be able to edit the site.
.SS "Privacy"
.IX Subsection "Privacy"
The server only actively logs changes to pages. It calculates a \*(L"code\*(R" for every
contribution: it is a four digit octal code. The idea is that you could colour
every digit using one of the eight standard terminal colours and thus get little
four-coloured flags.
.PP
This allows you to make a pretty good guess about edits made by the same person,
without telling you their \s-1IP\s0 numbers.
.PP
The code is computed as follows: the \s-1IP\s0 numbers is turned into a 32bit number
using a hash function, converted to octal, and the first four digits are the
code. Thus all possible \s-1IP\s0 numbers are mapped into 8X=4096 codes.
.PP
If you increase the log level, the server will produce more output, including
information about the connections happening, like \f(CW\*(C`2020/06/29\-15:35:59 CONNECT
SSL Peer: "[::1]:52730" Local: "[::1]:1965"\*(C'\fR and the like (in this case \f(CW\*(C`::1\*(C'\fR
is my local address so that isn't too useful but it could also be your visitor's
\&\s-1IP\s0 numbers, in which case you will need to tell them about it using in order to
comply with the
\&\s-1GDPR\s0 <https://en.wikipedia.org/wiki/General_Data_Protection_Regulation>.
.SS "Files"
.IX Subsection "Files"
If you allow uploads of binary files, these are stored separately from the
regular pages; the wiki also doesn't keep old revisions of files around. That
also means that if somebody overwrites a file, the old revision is gone.
.PP
You definitely don't want random people uploading all sorts of images, videos
and binaries files to your server. Make sure you set up those tokens
using \f(CW\*(C`\-\-wiki_token\*(C'\fR!
.SS "Main Page and Title"
.IX Subsection "Main Page and Title"
The main page will include (\*(L"transclude\*(R") a page of your choosing if you use the
\&\f(CW\*(C`\-\-wiki_main_page\*(C'\fR option. This also sets the title of your wiki in various
places like the \s-1RSS\s0 and Atom feeds.
.PP
In order to be more flexible, the name of the main page does not get printed. If
you want it, you need to add it yourself using a header. This allows you to keep
the main page in a page called \*(L"Welcome\*(R" containing some \s-1ASCII\s0 art such that the
word \*(L"Welcome\*(R" does not show on the main page. This assumes you're using
\&\f(CW\*(C`\-\-wiki_main_page=Welcome\*(C'\fR, of course.
.PP
If you have pages with names that start with an \s-1ISO\s0 date like 2020\-06\-30, then
I'm assuming you want some sort of blog. In this case, up to ten of them will be
shown on your front page.
.SS "\s-1GUS\s0 and robots.txt"
.IX Subsection "GUS and robots.txt"
There are search machines out there that will index your site. Ideally, these
wouldn't index the history pages and all that: they would only get the list of
all pages, and all the pages. I'm not even sure that we need them to look at all
the files. The robots exclusion
standard <https://en.wikipedia.org/wiki/Robots_exclusion_standard> lets you
control what the bots ought to index and what they ought to skip. It doesn't
always work.
.PP
Here's my suggestion:
.PP
.Vb 10
\&    User\-agent: *
\&    Disallow: raw/*
\&    Disallow: html/*
\&    Disallow: diff/*
\&    Disallow: history/*
\&    Disallow: do/changes*
\&    Disallow: do/all/changes*
\&    Disallow: do/rss
\&    Disallow: do/atom
\&    Disallow: do/new
\&    Disallow: do/more/*
\&    Disallow: do/match
\&    Disallow: do/search
\&    # allowing do/index!
\&    Crawl\-delay: 10
.Ve
.PP
In fact, as long as you don't create a page called \f(CW\*(C`robots\*(C'\fR then this is what
gets served. I think it's a good enough way to start. If you're using spaces,
the \f(CW\*(C`robots\*(C'\fR pages of all the spaces are concatenated.
.PP
If you want to be more paranoid, create a page called \f(CW\*(C`robots\*(C'\fR and put this on
it:
.PP
.Vb 2
\&    User\-agent: *
\&    Disallow: /
.Ve
.PP
Note that if you've created your own \f(CW\*(C`robots\*(C'\fR page, and you haven't decided to
disallow them all, then you also have to do the right thing for all your spaces,
if you use them at all.
.SS "Limited, read-only \s-1HTTP\s0 support"
.IX Subsection "Limited, read-only HTTP support"
You can actually look at your wiki pages using a browser! But beware: these days
browser will refuse to connect to sites that have self-signed certificates.
You'll have to click buttons and make exceptions and all of that, or get your
certificate from Let's Encrypt or the like. Anyway, it works in theory. If you
went through the \*(L"Quickstart\*(R", visiting \f(CW\*(C`https://localhost:1965/\*(C'\fR should
work!
.PP
Notice that Phoebe doesn't have to live behind another web server like
Apache or nginx. It's a (simple) web server, too!
.PP
Here's how you could serve the wiki both on Gemini, and the standard \s-1HTTPS\s0 port,
443:
.PP
.Vb 2
\&    sudo ./phoebe \-\-port=443 \-\-port=1965 \e
\&      \-\-user=$(id \-\-user \-\-name) \-\-group=$(id \-\-group  \-\-name)
.Ve
.PP
We need to use \fIsudo\fR because all the ports below 1024 are priviledge ports and
that includes the standard \s-1HTTPS\s0 port. Since we don't want the server itself to
run with all those priviledges, however, I'm using the \f(CW\*(C`\-\-user\*(C'\fR and \f(CW\*(C`\-\-group\*(C'\fR
options to change effective and user and group \s-1ID.\s0 The \fIid\fR command is used to
get your user and your group IDs instead. If you've followed the \*(L"Quickstart\*(R"
and created a separate \f(CW\*(C`phoebe\*(C'\fR user, you could simply use \f(CW\*(C`\-\-user=phoebe\*(C'\fR and
\&\f(CW\*(C`\-\-group=phoebe\*(C'\fR instead. X
.SS "Configuration"
.IX Subsection "Configuration"
This section describes some hooks you can use to customize your wiki using the
\&\fIconfig\fR file. Once you're happy with the changes you've made, reload the
server to make it read the config file. You can do that by sending it the \s-1HUP\s0
signal, if you know the pid, or if you have a pid file:
.PP
.Vb 1
\&    kill \-s SIGHUP \`cat phoebe.pid\`
.Ve
.PP
Here are the ways you can hook into Phoebe code:
.ie n .IP "@init is a list of code references allowing you to change the configuration of the server; it gets executed as the server starts, after regular configuration" 4
.el .IP "\f(CW@init\fR is a list of code references allowing you to change the configuration of the server; it gets executed as the server starts, after regular configuration" 4
.IX Item "@init is a list of code references allowing you to change the configuration of the server; it gets executed as the server starts, after regular configuration"
.PD 0
.ie n .IP "@extensions is a list of code references allowing you to handle additional URLs; return 1 if you handle a \s-1URL\s0; each code reference gets called with $self, the first line of the request (a Gemini \s-1URL,\s0 a Gopher selector, a finger user, a \s-1HTTP\s0 request line), and a hash reference for the headers (in the case of \s-1HTTP\s0 requests)" 4
.el .IP "\f(CW@extensions\fR is a list of code references allowing you to handle additional URLs; return 1 if you handle a \s-1URL\s0; each code reference gets called with \f(CW$self\fR, the first line of the request (a Gemini \s-1URL,\s0 a Gopher selector, a finger user, a \s-1HTTP\s0 request line), and a hash reference for the headers (in the case of \s-1HTTP\s0 requests)" 4
.IX Item "@extensions is a list of code references allowing you to handle additional URLs; return 1 if you handle a URL; each code reference gets called with $self, the first line of the request (a Gemini URL, a Gopher selector, a finger user, a HTTP request line), and a hash reference for the headers (in the case of HTTP requests)"
.ie n .IP "@main_menu adds more lines to the main menu, possibly links that aren't simply links to existing pages" 4
.el .IP "\f(CW@main_menu\fR adds more lines to the main menu, possibly links that aren't simply links to existing pages" 4
.IX Item "@main_menu adds more lines to the main menu, possibly links that aren't simply links to existing pages"
.ie n .IP "@footer is a list of code references allowing you to add things like licenses or contact information to every page; each code reference gets called with $self, $host, $space, $id, $revision, and $format ('gemini' or 'html') used to serve the page; return a gemtext string to append at the end; the alternative is to overwrite the ""footer"" or ""html_footer"" subs X the default implementation for Gemini adds History, Raw text and \s-1HTML\s0 link, and @footer to the bottom of every page; the default implementatino for \s-1HTTP\s0 just adds @footer to the bottom of every page" 4
.el .IP "\f(CW@footer\fR is a list of code references allowing you to add things like licenses or contact information to every page; each code reference gets called with \f(CW$self\fR, \f(CW$host\fR, \f(CW$space\fR, \f(CW$id\fR, \f(CW$revision\fR, and \f(CW$format\fR ('gemini' or 'html') used to serve the page; return a gemtext string to append at the end; the alternative is to overwrite the \f(CWfooter\fR or \f(CWhtml_footer\fR subs X the default implementation for Gemini adds History, Raw text and \s-1HTML\s0 link, and \f(CW@footer\fR to the bottom of every page; the default implementatino for \s-1HTTP\s0 just adds \f(CW@footer\fR to the bottom of every page" 4
.IX Item "@footer is a list of code references allowing you to add things like licenses or contact information to every page; each code reference gets called with $self, $host, $space, $id, $revision, and $format ('gemini' or 'html') used to serve the page; return a gemtext string to append at the end; the alternative is to overwrite the footer or html_footer subs X the default implementation for Gemini adds History, Raw text and HTML link, and @footer to the bottom of every page; the default implementatino for HTTP just adds @footer to the bottom of every page"
.PD
.PP
A very simple example to add a contact mail at the bottom of every page; this
works for both Gemini and the web:
.PP
.Vb 4
\&    package App::Phoebe;
\&    use Modern::Perl;
\&    our (@footer);
\&    push(@footer, sub { \*(Aq=> mailto:alex@alexschroeder.ch Mail\*(Aq });
.Ve
.PP
This prints a very simply footer instead of the usual footer for Gemini, as the
\&\f(CW\*(C`footer\*(C'\fR sub is redefined. At the same time, the \f(CW@footer\fR array is still used
for the web:
.PP
.Vb 9
\&    package App::Phoebe;
\&    use Modern::Perl;
\&    our (@footer); # HTML only
\&    push(@footer, sub { \*(Aq=> https://alexschroeder.ch/wiki/Contact Contact\*(Aq });
\&    # footer sub is Gemini only
\&    no warnings qw(redefine);
\&    sub footer {
\&      return \*(AqX\*(Aq x 10 . "\en" . \*(Aq=> mailto:alex@alexschroeder.ch Mail\*(Aq;
\&    }
.Ve
.PP
This example also shows how to redefine existing code in your config file
without the warning \*(L"Subroutine X redefined\*(R".
.PP
Here's a more elaborate example to add a new action the main menu and a handler
for it:
.PP
.Vb 10
\&    package App::Phoebe;
\&    use Modern::Perl;
\&    our (@extensions, @main_menu);
\&    push(@main_menu, "=> gemini://localhost/do/test Test");
\&    push(@extensions, \e&serve_test);
\&    sub serve_test {
\&      my $self = shift;
\&      my $url = shift;
\&      my $headers = shift;
\&      my $host = $self\->host_regex();
\&      my $port = $self\->port();
\&      if ($url =~ m!^gemini://($host)(?::$port)?/do/test$!) {
\&        say "20 text/plain\er";
\&        say "Test";
\&        return 1;
\&      }
\&      return;
\&    }
\&    1;
.Ve
.SS "Wiki Spaces"
.IX Subsection "Wiki Spaces"
Wiki spaces are separate wikis managed by the same Phoebe server, on the
same machine, but with data stored in a different directory. If you used
\&\f(CW\*(C`\-\-wiki_space=alex\*(C'\fR and \f(CW\*(C`\-\-wiki_space=berta\*(C'\fR, for example, then you'd have
three wikis in total:
.ie n .IP """gemini://localhost/"" is the main space that continues to be available" 4
.el .IP "\f(CWgemini://localhost/\fR is the main space that continues to be available" 4
.IX Item "gemini://localhost/ is the main space that continues to be available"
.PD 0
.ie n .IP """gemini://localhost/alex/"" is the wiki space for Alex" 4
.el .IP "\f(CWgemini://localhost/alex/\fR is the wiki space for Alex" 4
.IX Item "gemini://localhost/alex/ is the wiki space for Alex"
.ie n .IP """gemini://localhost/berta/"" is the wiki space for Berta" 4
.el .IP "\f(CWgemini://localhost/berta/\fR is the wiki space for Berta" 4
.IX Item "gemini://localhost/berta/ is the wiki space for Berta"
.PD
.PP
Note that all three spaces are still editable by anybody who knows any of the
tokens.
.SS "Tokens per Wiki Space"
.IX Subsection "Tokens per Wiki Space"
Per default, there is simply one set of tokens which allows the editing of the
wiki, and all the wiki spaces you defined. If you want to give users a token
just for their space, you can do that, too. Doing this is starting to strain the
command line interface, however, and therefore the following illustrates how to
do more advanced configuration using \f(CW@init\fR in the config file:
.PP
.Vb 8
\&    package App::Phoebe;
\&    use Modern::Perl;
\&    our (@init);
\&    push(@init, \e&init_tokens);
\&    sub init_tokens {
\&      my $self = shift;
\&      $self\->{server}\->{wiki_space_token}\->{alex} = ["*secret*"];
\&    };
.Ve
.PP
The code above sets up the \f(CW\*(C`wiki_space_token\*(C'\fR property. It's a hash reference
where keys are existing wiki spaces and values are array references listing the
valid tokens for that space (in addition to the global tokens that you can set
up using \f(CW\*(C`\-\-wiki_token\*(C'\fR which defaults to the token \*(L"hello\*(R"). Thus, the above
code sets up the token \f(CW\*(C`*secret*\*(C'\fR for the \f(CW\*(C`alex\*(C'\fR wiki space.
.PP
You can use the config file to change the values of other properties as well,
even if these properties are set via the command line.
.PP
.Vb 8
\&    package App::Phoebe;
\&    use Modern::Perl;
\&    our (@init);
\&    push(@init, \e&init_tokens);
\&    sub init_tokens {
\&      my $self = shift;
\&      $self\->{server}\->{wiki_token} = [];
\&    };
.Ve
.PP
This code simply deactivates the token list. No more tokens!
.SS "Client Certificates"
.IX Subsection "Client Certificates"
Phoebe serves a public wiki by default. In theory, limiting editing to
known users (that is, known client certificates) is possible. I say \*(L"in theory\*(R"
because this requires a small change to Net::Server::Proto::SSL. For your
convenience, this repository comes with a patched version (based on
Net::Server 2.009). All this does is add \f(CW\*(C`SSL_verify_callback\*(C'\fR to the list of
options for IO::Socket::SSL. Phoebe includes the local \fIlib\fR directory
in its library search path, so if you have the \fIlib/Net/Server/Proto/SSL.pm\fR
file in the current directory where you start \fIphoebe\fR, it should simply
work.
.PP
Here's a config file using client certificates to limit writing to a single,
known fingerprint:
.PP
.Vb 10
\&    package App::Phoebe;
\&    use Modern::Perl;
\&    our (@init, @extensions);
\&    my @fingerprints = (\*(Aqsha256$e4b871adf0d74d9ab61fbf0b6773d75a152594090916834278d416a769712570\*(Aq);
\&    push(@extensions, \e&protected_wiki);
\&    sub protected_wiki {
\&      my $self = shift;
\&      my $url = shift;
\&      my $host_regex = $self\->host_regex();
\&      my $port = $self\->port();
\&      my $spaces = $self\->space_regex();
\&      my $fingerprint = $self\->{server}\->{client}\->get_fingerprint();
\&      if (my ($host, $path) = $url =~ m!^titan://($host_regex)(?::$port)?([^?#]*)!) {
\&        my ($space, $resource) = $path =~ m!^(?:/($spaces))?(?:/raw)?/([^/;=&]+(?:;\ew+=[^;=&]+)+)!;
\&        if (not $resource) {
\&          $self\->log(4, "The Titan URL is malformed: $path $spaces");
\&          say "59 The Titan URL is malformed\er";
\&        } elsif ($fingerprint and grep { $_ eq $fingerprint} @fingerprints) {
\&          $self\->log(3, "Successfully identified client certificate");
\&          my ($id, @params) = split(/[;=&]/, $resource);
\&          $self\->write_page($host, $self\->space($host, $space), decode_utf8(uri_unescape($id)),
\&                            {map {decode_utf8(uri_unescape($_))} @params});
\&        } elsif ($fingerprint) {
\&          $self\->log(3, "Unknown client certificate $fingerprint");
\&          say "61 Your client certificate is not authorized for editing\er";
\&        } else {
\&          $self\->log(3, "Requested client certificate");
\&          say "60 You need a client certificate to edit this wiki\er";
\&        }
\&        return 1;
\&      }
\&      return;
\&    }
\&    1;
.Ve
.PP
\&\f(CW@fingerprints\fR is a list, so you could add more fingerprints:
.PP
.Vb 3
\&    my @fingerprints = qw(
\&      sha256$e4b871adf0d74d9ab61fbf0b6773d75a152594090916834278d416a769712570
\&      sha256$4a948f5a11f4a81d0a2e8b60b1e4b3c9d1e25f4d95694965d98b333a443a3b25);
.Ve
.PP
Or you could read them from a file:
.PP
.Vb 2
\&    use File::Slurper qw(read_lines);
\&    my @fingerprints = read_lines("fingerprints");
.Ve
.PP
The important part is that this code matches the same Titan requests as the
default code, and it comes first. Thus, the old code can no longer be reached
and this code checks for a known client certificate fingerprint.
.PP
To be sure, it doesn't check anything else! It doesn't check whether the client
certificate has expired, for example.
.PP
You could, for example, install Phoebe, use the code above for your config
file, and replace the fingerprint with the fingerprint of your own client
certificate. The \fIMakefile\fR allows you to easily create such a certificate:
.PP
.Vb 1
\&    make client\-cert
.Ve
.PP
Answer at least one of the questions OpenSSL asks of you and you should now have
a \fIclient\-cert.pem\fR and a \fIclient\-key.pem\fR file. To get the fingerprint of
your client certificate:
.PP
.Vb 1
\&    make client\-fingerprint
.Ve
.PP
The output is the fingerprint you need to put into your config file.
.SS "Virtual Hosting"
.IX Subsection "Virtual Hosting"
Sometimes you want have a machine reachable under different domain names and you
want each domain name to have their own wiki space, automatically. You can do
this by using multiple \f(CW\*(C`\-\-host\*(C'\fR options.
.PP
Here's a simple, stand-alone setup that will work on your local machine. These
are usually reachable using the IPv4 \f(CW127.0.0.1\fR or the name \f(CW\*(C`localhost\*(C'\fR. The
following command tells Phoebe to serve both \f(CW127.0.0.1\fR and \f(CW\*(C`localhost\*(C'\fR
(the default is to just serve \f(CW\*(C`localhost\*(C'\fR).
.PP
.Vb 1
\&    perl phoebe \-\-host=127.0.0.1 \-\-host=localhost
.Ve
.PP
Visit both at <gemini://localhost/> and <gemini://127.0.0.1/>, and create a
new page in each one, then examine the data directory \fIwiki\fR. You'll see both
\&\fIwiki/localhost\fR and \fIwiki/127.0.0.1\fR.
.PP
If you're using more wiki spaces, you need to prefix them with the respective
hostname if you use more than one:
.PP
.Vb 2
\&    perl phoebe \-\-host=127.0.0.1 \-\-host=localhost \e
\&        \-\-wiki_space=127.0.0.1/alex \-\-wiki_space=localhost/berta
.Ve
.PP
In this situation, you can visit <gemini://127.0.0.1/>,
<gemini://127.0.0.1/alex/>, <gemini://localhost/>, and
<gemini://localhost/berta/>, and they will all be different.
.PP
If this is confusing, remember that not using virtual hosting and not using
spaces is fine, too. X
.SS "Multiple Certificates"
.IX Subsection "Multiple Certificates"
If you're using virtual hosting as discussed above, you have two options: you
can use one certificate for all your hostnames, or you can use different
certificates for the hosts. If you want to use just one certificate for all your
hosts, you don't need to do anything else. If you want to use different
certificates for different hosts, you have to specify them all on the command
line. Generally speaking, use \f(CW\*(C`\-\-host\*(C'\fR to specifiy one or more hosts, followed
by both \f(CW\*(C`\-\-cert_file\*(C'\fR and \f(CW\*(C`\-\-key_file\*(C'\fR to specifiy the certificate and key to
use for the hosts.
.PP
For example:
.PP
.Vb 6
\&    perl phoebe \-\-host=transjovian.org \e
\&        \-\-cert_file=/var/lib/dehydrated/certs/transjovian.org/cert.pem \e
\&        \-\-key_file=/var/lib/dehydrated/certs/transjovian.org/privkey.pem \e
\&        \-\-host=alexschroeder.ch \e
\&        \-\-cert_file=/var/lib/dehydrated/certs/alexschroeder.ch/cert.pem \e
\&        \-\-key_file=/var/lib/dehydrated/certs/alexschroeder.ch/privkey.pem
.Ve
.SS "\s-1CSS\s0 for the Web"
.IX Subsection "CSS for the Web"
The wiki can also answer web requests. By default, it only does that on port
1965. The web pages refer to a \s-1CSS\s0 file at \f(CW\*(C`/default.css\*(C'\fR, and the response to
a request for this \s-1CSS\s0 is served by a function that you can override in your
config file. The following would be the beginning of a \s-1CSS\s0 that supports a dark
theme, for example. The
Cache-Control <https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control>
header makes sure browsers don't keep trying to revalidate the \s-1CSS\s0 more than
once a day.
.PP
.Vb 10
\&    sub serve_css_via_http {
\&      my $self = shift;
\&      $self\->log(3, "Serving CSS via HTTP");
\&      say "HTTP/1.1 200 OK\er";
\&      say "Content\-Type: text/css\er";
\&      say "Cache\-Control: public, max\-age=86400, immutable\er"; # 24h
\&      say "\er";
\&      say <<\*(AqEOT\*(Aq;
\&    html { max\-width: 70ch; padding: 2ch; margin: auto; }
\&    body { color: #111111; background\-color: #fffff8; }
\&    a:link { color: #0000ee }
\&    a:visited { color: #551a8b }
\&    a:hover { color: #7a67ee }
\&    @media (prefers\-color\-scheme: dark) {
\&       body { color: #eeeee8; background\-color: #333333; }
\&       a:link { color: #1e90ff }
\&       a:hover { color: #63b8ff }
\&       a:visited { color: #7a67ee }
\&    }
\&    EOT
\&    }
.Ve
.SS "Favicon for the Web"
.IX Subsection "Favicon for the Web"
Here's an example where we a little Jupiter \s-1SVG\s0 is being served for the favicon,
for all hosts. You could, of course, accept the \f(CW$headers\fR as an additional
argument to \f(CW\*(C`favicon\*(C'\fR, match hostnames, pass the \f(CW$host\fR to
\&\f(CW\*(C`serve_favicon_via_http\*(C'\fR, and return different images depending on the host.
Let me know if you need this and you are stuck.
.PP
.Vb 1
\&    push(@extensions, \e&favicon);
\&
\&    sub favicon {
\&      my $self = shift;
\&      my $url = shift;
\&      if ($url =~ m!^GET /favicon.ico HTTP/1\e.[01]$!) {
\&        $self\->serve_favicon_via_http();
\&        return 1;
\&      }
\&      return 0;
\&    }
\&
\&    sub serve_favicon_via_http {
\&      my $self = shift;
\&      $self\->log(3, "Serving favicon via HTTP");
\&      say "HTTP/1.1 200 OK\er";
\&      say "Content\-Type: image/svg+xml\er";
\&      say "Cache\-Control: public, max\-age=86400, immutable\er"; # 24h
\&      say "\er";
\&      say <<\*(AqEOT\*(Aq;
\&    <?xml version="1.0" encoding="UTF\-8" standalone="no"?>
\&    <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100">
\&    <circle cx="50" cy="50" r="45" fill="white" stroke="black" stroke\-width="5"/>
\&    <line x1="12" y1="25" x2="88" y2="25" stroke="black" stroke\-width="4"/>
\&    <line x1="5" y1="45" x2="95" y2="45" stroke="black" stroke\-width="7"/>
\&    <line x1="5" y1="60" x2="95" y2="60" stroke="black" stroke\-width="4"/>
\&    <path d="M20,73 C30,65 40,63 60,70 C70,72 80,73 90,72
\&             L90,74 C80,75 70,74 60,76 C40,83 30,81 20,73" fill="black"/>
\&    <ellipse cx="40" cy="73" rx="11.5" ry="4.5" fill="red"/>
\&    <line x1="22" y1="85" x2="78" y2="85" stroke="black" stroke\-width="3"/>
\&    </svg>
\&    EOT
\&    }
.Ve
